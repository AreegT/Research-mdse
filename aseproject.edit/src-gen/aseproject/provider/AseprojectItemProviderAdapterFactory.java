/**
 */
package aseproject.provider;

import aseproject.util.AseprojectAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class AseprojectItemProviderAdapterFactory extends AseprojectAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public AseprojectItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.CRIPS} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CRIPSItemProvider cripsItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.CRIPS}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCRIPSAdapter() {
		if (cripsItemProvider == null) {
			cripsItemProvider = new CRIPSItemProvider(this);
		}

		return cripsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Contigency} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ContigencyItemProvider contigencyItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Contigency}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createContigencyAdapter() {
		if (contigencyItemProvider == null) {
			contigencyItemProvider = new ContigencyItemProvider(this);
		}

		return contigencyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Hazard} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected HazardItemProvider hazardItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Hazard}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createHazardAdapter() {
		if (hazardItemProvider == null) {
			hazardItemProvider = new HazardItemProvider(this);
		}

		return hazardItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Vulnerability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VulnerabilityItemProvider vulnerabilityItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Vulnerability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVulnerabilityAdapter() {
		if (vulnerabilityItemProvider == null) {
			vulnerabilityItemProvider = new VulnerabilityItemProvider(this);
		}

		return vulnerabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Risk} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RiskItemProvider riskItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Risk}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRiskAdapter() {
		if (riskItemProvider == null) {
			riskItemProvider = new RiskItemProvider(this);
		}

		return riskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Tangible} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TangibleItemProvider tangibleItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Tangible}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTangibleAdapter() {
		if (tangibleItemProvider == null) {
			tangibleItemProvider = new TangibleItemProvider(this);
		}

		return tangibleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Intangible} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntangibleItemProvider intangibleItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Intangible}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntangibleAdapter() {
		if (intangibleItemProvider == null) {
			intangibleItemProvider = new IntangibleItemProvider(this);
		}

		return intangibleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Responder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponderItemProvider responderItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Responder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponderAdapter() {
		if (responderItemProvider == null) {
			responderItemProvider = new ResponderItemProvider(this);
		}

		return responderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Response} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResponseItemProvider responseItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Response}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResponseAdapter() {
		if (responseItemProvider == null) {
			responseItemProvider = new ResponseItemProvider(this);
		}

		return responseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Resource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ResourceItemProvider resourceItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Resource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createResourceAdapter() {
		if (resourceItemProvider == null) {
			resourceItemProvider = new ResourceItemProvider(this);
		}

		return resourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Member} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemberItemProvider memberItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Member}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemberAdapter() {
		if (memberItemProvider == null) {
			memberItemProvider = new MemberItemProvider(this);
		}

		return memberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.Repository} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RepositoryItemProvider repositoryItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.Repository}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRepositoryAdapter() {
		if (repositoryItemProvider == null) {
			repositoryItemProvider = new RepositoryItemProvider(this);
		}

		return repositoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.IntelligentRater} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntelligentRaterItemProvider intelligentRaterItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.IntelligentRater}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntelligentRaterAdapter() {
		if (intelligentRaterItemProvider == null) {
			intelligentRaterItemProvider = new IntelligentRaterItemProvider(this);
		}

		return intelligentRaterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.CPB} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CPBItemProvider cpbItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.CPB}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCPBAdapter() {
		if (cpbItemProvider == null) {
			cpbItemProvider = new CPBItemProvider(this);
		}

		return cpbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link aseproject.FeedBack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeedBackItemProvider feedBackItemProvider;

	/**
	 * This creates an adapter for a {@link aseproject.FeedBack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeedBackAdapter() {
		if (feedBackItemProvider == null) {
			feedBackItemProvider = new FeedBackItemProvider(this);
		}

		return feedBackItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (cripsItemProvider != null)
			cripsItemProvider.dispose();
		if (contigencyItemProvider != null)
			contigencyItemProvider.dispose();
		if (entityItemProvider != null)
			entityItemProvider.dispose();
		if (hazardItemProvider != null)
			hazardItemProvider.dispose();
		if (vulnerabilityItemProvider != null)
			vulnerabilityItemProvider.dispose();
		if (riskItemProvider != null)
			riskItemProvider.dispose();
		if (tangibleItemProvider != null)
			tangibleItemProvider.dispose();
		if (intangibleItemProvider != null)
			intangibleItemProvider.dispose();
		if (responderItemProvider != null)
			responderItemProvider.dispose();
		if (responseItemProvider != null)
			responseItemProvider.dispose();
		if (resourceItemProvider != null)
			resourceItemProvider.dispose();
		if (memberItemProvider != null)
			memberItemProvider.dispose();
		if (repositoryItemProvider != null)
			repositoryItemProvider.dispose();
		if (intelligentRaterItemProvider != null)
			intelligentRaterItemProvider.dispose();
		if (cpbItemProvider != null)
			cpbItemProvider.dispose();
		if (feedBackItemProvider != null)
			feedBackItemProvider.dispose();
	}

}
